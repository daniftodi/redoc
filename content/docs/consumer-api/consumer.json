{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Extole consumer-api",
    "description" : "This is a sample generated doc.",
    "contact" : {
      "email" : "support@extole.com"
    },
    "version" : "1.0"
  },
  "servers" : [ {
    "url" : "https://extole-api.extole.io/api/",
    "description" : "ExtoleAPI"
  } ],
  "tags" : [ {
    "name" : "/v5/token",
    "description" : "Authorization"
  }, {
    "name" : "/v4/token",
    "description" : "AuthorizationV4"
  }, {
    "name" : "/v4/debug/logs",
    "description" : "CreativeLogging"
  }, {
    "name" : "/v4/me",
    "description" : "Me"
  }, {
    "name" : "/v4/me/rewards",
    "description" : "MeReward"
  }, {
    "name" : "/events",
    "description" : "Event"
  }, {
    "name" : "/v6/zones",
    "description" : "Zone"
  } ],
  "paths" : {
    "/v5/token" : {
      "get" : {
        "tags" : [ "/v5/token" ],
        "summary" : "Get access token details",
        "description" : "It is optional to pass a token in the URL. If no token is passed in the URL it will attempt to return details about any implied token from authorization header.",
        "operationId" : "getTokenDetails",
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "code=missing_access_token, message=No access_token was provided with this request.\n\ncode=invalid_access_token, message=The access_token provided with this request is invalid.\n\ncode=expired_access_token, message=The access_token provided with this request has expired.\n\ncode=access_denied, message=The access_token provided is not permitted to access the specified resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestExceptionResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "HEADER" : [ ]
        }, {
          "COOKIE" : [ ]
        }, {
          "QUERY" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "/v5/token" ],
        "summary" : "Creates a new access token",
        "description" : "It is optional to pass an email or JWT.",
        "operationId" : "createToken",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateTokenRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "code=invalid_access_token_duration, message=The duration provided with this request is invalid.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestExceptionResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "code=jwt_error, message=The jwt authentication failed.\n\ncode=invalid_email, message=Invalid email\n\ncode=email_mismatch, message=Mismatch in specified emails",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestExceptionResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "HEADER" : [ ]
        }, {
          "COOKIE" : [ ]
        }, {
          "QUERY" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "/v5/token" ],
        "summary" : "Deletes the unique access token identified in the request from the associate user's profile.",
        "description" : "It is optional to pass a token in the URL. If no token is passed in the URL it will attempt to delete any implied token from authorization header.",
        "operationId" : "deleteToken",
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "*/*" : { }
            }
          },
          "403" : {
            "description" : "code=missing_access_token, message=No access_token was provided with this request.\n\ncode=invalid_access_token, message=The access_token provided with this request is invalid.\n\ncode=expired_access_token, message=The access_token provided with this request has expired.\n\ncode=access_denied, message=The access_token provided is not permitted to access the specified resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestExceptionResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "HEADER" : [ ]
        }, {
          "COOKIE" : [ ]
        }, {
          "QUERY" : [ ]
        } ]
      }
    },
    "/v4/token" : {
      "get" : {
        "tags" : [ "/v4/token" ],
        "summary" : "By calling the Get Token endpoint a new access token is created.",
        "description" : "By calling the Get Token endpoint a new access token is created.  Extole will attempt to detect who the advocate is (based on cookies, browser fingerprint, etc) and provide them an access token with the greatest number of capabilities possible.  If Extole is unable to recognize the advocate the access token will only have the UPDATE_PROFILE capability available.",
        "operationId" : "getToken",
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TokenV4Response"
                }
              }
            }
          }
        },
        "security" : [ {
          "HEADER" : [ ]
        }, {
          "COOKIE" : [ ]
        }, {
          "QUERY" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "/v4/token" ],
        "summary" : "Deletes the unique access token identified in the request from the associate user's profile.",
        "description" : "It is optional to pass a token in the URL.  If no token is passed in the URL it will attempt to delete any implied token that exists as a cookie, fingerprint, etc.",
        "operationId" : "deleteToken",
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "*/*" : { }
            }
          },
          "403" : {
            "description" : "code=missing_access_token, message=No access_token was provided with this request.\n\ncode=invalid_access_token, message=The access_token provided with this request is invalid.\n\ncode=expired_access_token, message=The access_token provided with this request has expired.\n\ncode=access_denied, message=The access_token provided is not permitted to access the specified resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestExceptionResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "HEADER" : [ ]
        }, {
          "COOKIE" : [ ]
        }, {
          "QUERY" : [ ]
        } ]
      }
    },
    "/v4/token/{token}" : {
      "get" : {
        "tags" : [ "/v4/token" ],
        "summary" : "Returns the unique access token associated with the user in the browser.",
        "operationId" : "getTokenDetails",
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TokenV4Response"
                }
              }
            }
          },
          "403" : {
            "description" : "code=missing_access_token, message=No access_token was provided with this request.\n\ncode=invalid_access_token, message=The access_token provided with this request is invalid.\n\ncode=expired_access_token, message=The access_token provided with this request has expired.\n\ncode=access_denied, message=The access_token provided is not permitted to access the specified resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestExceptionResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "HEADER" : [ ]
        }, {
          "COOKIE" : [ ]
        }, {
          "QUERY" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "/v4/token" ],
        "summary" : "Deletes the unique access token identified in the request from the associate user's profile.",
        "description" : "It is optional to pass a token in the URL.  If no token is passed in the URL it will attempt to delete any implied token that exists as a cookie, fingerprint, etc.",
        "operationId" : "deleteToken",
        "parameters" : [ {
          "name" : "token",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "*/*" : { }
            }
          },
          "403" : {
            "description" : "code=missing_access_token, message=No access_token was provided with this request.\n\ncode=invalid_access_token, message=The access_token provided with this request is invalid.\n\ncode=expired_access_token, message=The access_token provided with this request has expired.\n\ncode=access_denied, message=The access_token provided is not permitted to access the specified resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestExceptionResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "HEADER" : [ ]
        }, {
          "COOKIE" : [ ]
        }, {
          "QUERY" : [ ]
        } ]
      }
    },
    "/v4/token/get" : {
      "post" : {
        "tags" : [ "/v4/token" ],
        "summary" : "Returns the unique access token associated with the user in the browser.",
        "description" : "Support POST to get token details to allow request without token in url.",
        "operationId" : "getTokenPost",
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TokenV4Response"
                }
              }
            }
          },
          "403" : {
            "description" : "code=missing_access_token, message=No access_token was provided with this request.\n\ncode=invalid_access_token, message=The access_token provided with this request is invalid.\n\ncode=expired_access_token, message=The access_token provided with this request has expired.\n\ncode=access_denied, message=The access_token provided is not permitted to access the specified resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestExceptionResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "HEADER" : [ ]
        }, {
          "COOKIE" : [ ]
        }, {
          "QUERY" : [ ]
        } ]
      }
    },
    "/v4/debug/logs" : {
      "post" : {
        "tags" : [ "/v4/debug/logs" ],
        "summary" : "Used to send log messages to Extole",
        "operationId" : "create",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateCreativeLogRequest"
              }
            },
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateCreativeLogRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateCreativeLogResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "HEADER" : [ ]
        }, {
          "COOKIE" : [ ]
        }, {
          "QUERY" : [ ]
        } ]
      }
    },
    "/v4/debug/metrics" : {
      "post" : {
        "summary" : "Record metric internally in grafana",
        "operationId" : "record",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreativeMetricRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreativeMetricResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "code=invalid_metric_type, message=Metric type unsupported\n\ncode=invalid_key, message=Key must only contain alphanumerics and underscores\n\ncode=missing_required_field, message=Required field is missing\n\ncode=key_is_already_used, message=Key is already used for a different type of metric",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestExceptionResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "code=missing_access_token, message=No access_token was provided with this request.\n\ncode=invalid_access_token, message=The access_token provided with this request is invalid.\n\ncode=expired_access_token, message=The access_token provided with this request has expired.\n\ncode=access_denied, message=The access_token provided is not permitted to access the specified resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestExceptionResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "HEADER" : [ ]
        }, {
          "COOKIE" : [ ]
        }, {
          "QUERY" : [ ]
        } ]
      }
    },
    "/v4/me" : {
      "get" : {
        "tags" : [ "/v4/me" ],
        "description" : "Will return profile information based on the access token used.",
        "operationId" : "getMyProfile",
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MyProfileResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "code=missing_access_token, message=No access_token was provided with this request.\n\ncode=invalid_access_token, message=The access_token provided with this request is invalid.\n\ncode=expired_access_token, message=The access_token provided with this request has expired.\n\ncode=access_denied, message=The access_token provided is not permitted to access the specified resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestExceptionResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "HEADER" : [ ]
        }, {
          "COOKIE" : [ ]
        }, {
          "QUERY" : [ ]
        } ]
      }
    },
    "/v4/me/rewards/status" : {
      "get" : {
        "tags" : [ "/v4/me/rewards" ],
        "description" : "Poll this endpoint in order to get Person reward",
        "operationId" : "getRewardStatus",
        "parameters" : [ {
          "name" : "polling_id",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "reward_name",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "partner_event_id",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PollingRewardResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "code=invalid_reward_id, message=Invalid reward id. Reward not found.\n\ncode=invalid_reward_filter, message=Invalid reward filter, one of: polling_id, reward_name or partner_event_id are required",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestExceptionResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "code=missing_access_token, message=No access_token was provided with this request.\n\ncode=invalid_access_token, message=The access_token provided with this request is invalid.\n\ncode=expired_access_token, message=The access_token provided with this request has expired.\n\ncode=access_denied, message=The access_token provided is not permitted to access the specified resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestExceptionResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "HEADER" : [ ]
        }, {
          "COOKIE" : [ ]
        }, {
          "QUERY" : [ ]
        } ]
      }
    },
    "/v4/persons/{personId}/assets" : {
      "get" : {
        "summary" : "Get a list of assets",
        "operationId" : "listAssets",
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "The Extole unique profile identifier of this user at Extole.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PersonAssetResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "code=invalid_person_id, message=Invalid person_id\n\ncode=invalid_profile_picture_url, message=Malformed profile_picture_url\n\ncode=invalid_person_email, message=Invalid person email\n\ncode=invalid_length_first_name, message=First Name length greater than 50 characters\n\ncode=invalid_length_last_name, message=Last Name length greater than 50 characters\n\ncode=person_email_already_defined, message=Person email already defined\n\ncode=partner_user_id_already_defined, message=Partner user id already defined\n\ncode=partner_user_id_invalid_length, message=Partner user id length greater than 255 characters\n\ncode=person_not_found, message=Person not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestExceptionResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "code=missing_access_token, message=No access_token was provided with this request.\n\ncode=invalid_access_token, message=The access_token provided with this request is invalid.\n\ncode=expired_access_token, message=The access_token provided with this request has expired.\n\ncode=access_denied, message=The access_token provided is not permitted to access the specified resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestExceptionResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "HEADER" : [ ]
        }, {
          "COOKIE" : [ ]
        }, {
          "QUERY" : [ ]
        } ]
      }
    },
    "/v4/persons/{personId}/assets/{assetId}" : {
      "get" : {
        "summary" : "Gets Details for an asset",
        "operationId" : "readAsset",
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "The Extole unique profile identifier of this user at Extole.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "assetId",
          "in" : "path",
          "description" : "The Extole unique profile identifier of this asset at Extole.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PersonAssetResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "code=invalid_person_id, message=Invalid person_id\n\ncode=invalid_profile_picture_url, message=Malformed profile_picture_url\n\ncode=invalid_person_email, message=Invalid person email\n\ncode=invalid_length_first_name, message=First Name length greater than 50 characters\n\ncode=invalid_length_last_name, message=Last Name length greater than 50 characters\n\ncode=person_email_already_defined, message=Person email already defined\n\ncode=partner_user_id_already_defined, message=Partner user id already defined\n\ncode=partner_user_id_invalid_length, message=Partner user id length greater than 255 characters\n\ncode=person_not_found, message=Person not found\n\ncode=asset_not_found, message=Asset not found\n\ncode=asset_content_not_found, message=Asset content could not be downloaded",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestExceptionResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "code=missing_access_token, message=No access_token was provided with this request.\n\ncode=invalid_access_token, message=The access_token provided with this request is invalid.\n\ncode=expired_access_token, message=The access_token provided with this request has expired.\n\ncode=access_denied, message=The access_token provided is not permitted to access the specified resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestExceptionResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "HEADER" : [ ]
        }, {
          "COOKIE" : [ ]
        }, {
          "QUERY" : [ ]
        } ]
      }
    },
    "/v4/persons/{personId}/assets/{assetId}/download" : {
      "get" : {
        "summary" : "Download content for an asset",
        "operationId" : "downloadAssetById",
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "The Extole unique profile identifier of this user at Extole.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "assetId",
          "in" : "path",
          "description" : "The Extole unique profile identifier of this asset at Extole.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "*/*" : { }
            }
          },
          "400" : {
            "description" : "code=invalid_person_id, message=Invalid person_id\n\ncode=invalid_profile_picture_url, message=Malformed profile_picture_url\n\ncode=invalid_person_email, message=Invalid person email\n\ncode=invalid_length_first_name, message=First Name length greater than 50 characters\n\ncode=invalid_length_last_name, message=Last Name length greater than 50 characters\n\ncode=person_email_already_defined, message=Person email already defined\n\ncode=partner_user_id_already_defined, message=Partner user id already defined\n\ncode=partner_user_id_invalid_length, message=Partner user id length greater than 255 characters\n\ncode=person_not_found, message=Person not found\n\ncode=asset_not_found, message=Asset not found\n\ncode=asset_content_not_found, message=Asset content could not be downloaded",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestExceptionResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "code=missing_access_token, message=No access_token was provided with this request.\n\ncode=invalid_access_token, message=The access_token provided with this request is invalid.\n\ncode=expired_access_token, message=The access_token provided with this request has expired.\n\ncode=access_denied, message=The access_token provided is not permitted to access the specified resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestExceptionResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "HEADER" : [ ]
        }, {
          "COOKIE" : [ ]
        }, {
          "QUERY" : [ ]
        } ]
      }
    },
    "/v4/persons/{personId}/assets/download" : {
      "get" : {
        "summary" : "Download content for an asset",
        "operationId" : "downloadAssetByName",
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "The Extole unique profile identifier of this user at Extole.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "name",
          "in" : "query",
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "*/*" : { }
            }
          },
          "400" : {
            "description" : "code=invalid_person_id, message=Invalid person_id\n\ncode=invalid_profile_picture_url, message=Malformed profile_picture_url\n\ncode=invalid_person_email, message=Invalid person email\n\ncode=invalid_length_first_name, message=First Name length greater than 50 characters\n\ncode=invalid_length_last_name, message=Last Name length greater than 50 characters\n\ncode=person_email_already_defined, message=Person email already defined\n\ncode=partner_user_id_already_defined, message=Partner user id already defined\n\ncode=partner_user_id_invalid_length, message=Partner user id length greater than 255 characters\n\ncode=person_not_found, message=Person not found\n\ncode=asset_not_found, message=Asset not found\n\ncode=asset_content_not_found, message=Asset content could not be downloaded",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestExceptionResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "code=missing_access_token, message=No access_token was provided with this request.\n\ncode=invalid_access_token, message=The access_token provided with this request is invalid.\n\ncode=expired_access_token, message=The access_token provided with this request has expired.\n\ncode=access_denied, message=The access_token provided is not permitted to access the specified resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestExceptionResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "HEADER" : [ ]
        }, {
          "COOKIE" : [ ]
        }, {
          "QUERY" : [ ]
        } ]
      }
    },
    "/events/{event_name}" : {
      "get" : {
        "tags" : [ "/events" ],
        "summary" : "Submits the event with the name specified in URI.",
        "description" : "Event data may be passed as query parameters and/or JWT encoded query parameter. This endpoint may return a new access_token cookie. Please use the more standard /api/vN/events endpoint if you want to manage the access token.",
        "operationId" : "fetch",
        "parameters" : [ {
          "name" : "event_name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Always return 200. Strongly typed response body, see SubmitEventResponse. ",
            "headers" : {
              "X-Extole-Token" : {
                "style" : "simple"
              },
              "X-Extole-Cookie-Consent" : {
                "style" : "simple"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubmitEventResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "HEADER" : [ ]
        }, {
          "COOKIE" : [ ]
        }, {
          "QUERY" : [ ]
        } ]
      }
    },
    "/events" : {
      "post" : {
        "tags" : [ "/events" ],
        "summary" : "Submits the event with the name specified in request body.",
        "description" : "Event data may be passed as query parameters/request body and/or  JWT encoded query parameter/request body attribute. This endpoint may return a new access_token cookie. Please use the more standard /api/vN/events endpoint if you want to manage the access token.",
        "operationId" : "post",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SubmitEventRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Always return 200. Strongly typed response body, see SubmitEventResponse. ",
            "headers" : {
              "X-Extole-Token" : {
                "style" : "simple"
              },
              "X-Extole-Cookie-Consent" : {
                "style" : "simple"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SubmitEventResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "HEADER" : [ ]
        }, {
          "COOKIE" : [ ]
        }, {
          "QUERY" : [ ]
        } ]
      }
    },
    "/zones/{zone_name}" : {
      "post" : {
        "description" : "This endpoint is optimized for calling from a web page.For proper RESTful endpoint consider /v6/zones.",
        "operationId" : "post",
        "parameters" : [ {
          "name" : "zone_name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "object"
                }
              }
            },
            "text/plain" : {
              "schema" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "object"
                }
              }
            },
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "object"
                }
              }
            },
            "multipart/form-data" : {
              "schema" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "object"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "*/*" : { }
            }
          }
        },
        "security" : [ {
          "HEADER" : [ ]
        }, {
          "COOKIE" : [ ]
        }, {
          "QUERY" : [ ]
        } ]
      }
    },
    "/zones" : {
      "post" : {
        "description" : "This endpoint is optimized for calling from a web page.For proper RESTful endpoint consider /v6/zones.",
        "operationId" : "post",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RenderZoneRequest"
              }
            },
            "text/plain" : {
              "schema" : {
                "$ref" : "#/components/schemas/RenderZoneRequest"
              }
            },
            "application/x-www-form-urlencoded" : {
              "schema" : {
                "$ref" : "#/components/schemas/RenderZoneRequest"
              }
            },
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/RenderZoneRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "*/*" : { }
            }
          }
        },
        "security" : [ {
          "HEADER" : [ ]
        }, {
          "COOKIE" : [ ]
        }, {
          "QUERY" : [ ]
        } ]
      }
    },
    "/v6/zones" : {
      "post" : {
        "tags" : [ "/v6/zones" ],
        "description" : "This endpoint is REST - optimized. For web behavior consider /zones endpoints.",
        "operationId" : "render",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RenderZoneRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ZoneResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "code=missing_zone_name, message=Zone name is required.\n\ncode=invalid_zone_name, message=Zone name not valid.\n\ncode=invalid_creative_result, message=Configured creative did not return json.\n\ncode=unexpected_content_type, message=Configured creative Content-Type not supported.\n\ncode=unexpected_redirect, message=Creative redirect not supported.\n\ncode=no_creative, message=No Configured creative.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestExceptionResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "code=missing_access_token, message=No access_token was provided with this request.\n\ncode=invalid_access_token, message=The access_token provided with this request is invalid.\n\ncode=expired_access_token, message=The access_token provided with this request has expired.\n\ncode=access_denied, message=The access_token provided is not permitted to access the specified resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestExceptionResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "HEADER" : [ ]
        }, {
          "COOKIE" : [ ]
        }, {
          "QUERY" : [ ]
        } ]
      }
    },
    "/v6/zones/{event_name}" : {
      "post" : {
        "tags" : [ "/v6/zones" ],
        "description" : "This endpoint is REST - optimized. For web behavior consider /zones endpoints.",
        "operationId" : "render",
        "parameters" : [ {
          "name" : "event_name",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "object"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "default response",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ZoneResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "code=missing_zone_name, message=Zone name is required.\n\ncode=invalid_zone_name, message=Zone name not valid.\n\ncode=invalid_creative_result, message=Configured creative did not return json.\n\ncode=unexpected_content_type, message=Configured creative Content-Type not supported.\n\ncode=unexpected_redirect, message=Creative redirect not supported.\n\ncode=no_creative, message=No Configured creative.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestExceptionResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "code=missing_access_token, message=No access_token was provided with this request.\n\ncode=invalid_access_token, message=The access_token provided with this request is invalid.\n\ncode=expired_access_token, message=The access_token provided with this request has expired.\n\ncode=access_denied, message=The access_token provided is not permitted to access the specified resource.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestExceptionResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "HEADER" : [ ]
        }, {
          "COOKIE" : [ ]
        }, {
          "QUERY" : [ ]
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "TokenResponse" : {
        "type" : "object",
        "properties" : {
          "access_token" : {
            "type" : "string"
          },
          "expires_in" : {
            "type" : "integer",
            "format" : "int64"
          },
          "scopes" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "VERIFIED_CONSUMER", "UPDATE_PROFILE" ]
            }
          }
        }
      },
      "CreateTokenRequest" : {
        "type" : "object",
        "properties" : {
          "duration_seconds" : {
            "type" : "integer",
            "format" : "int64"
          },
          "jwt" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          }
        }
      },
      "TokenV4Response" : {
        "type" : "object",
        "properties" : {
          "access_token" : {
            "type" : "string"
          },
          "expires_in" : {
            "type" : "integer",
            "format" : "int64"
          },
          "scopes" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "VERIFIED_CONSUMER", "UPDATE_PROFILE" ]
            }
          },
          "capabilities" : {
            "uniqueItems" : true,
            "type" : "array",
            "items" : {
              "type" : "string",
              "enum" : [ "VERIFIED_CONSUMER", "UPDATE_PROFILE" ]
            }
          }
        }
      },
      "CreateCreativeLogResponse" : {
        "type" : "object",
        "properties" : {
          "polling_id" : {
            "type" : "string"
          }
        }
      },
      "CreateCreativeLogRequest" : {
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string"
          },
          "level" : {
            "type" : "string",
            "enum" : [ "ERROR", "WARN", "INFO", "DEBUG" ]
          }
        }
      },
      "CreativeMetricResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          }
        }
      },
      "CreativeMetricRequest" : {
        "required" : [ "key", "metric_type", "value" ],
        "type" : "object",
        "properties" : {
          "key" : {
            "type" : "string"
          },
          "metric_type" : {
            "type" : "string",
            "enum" : [ "HISTOGRAM", "COUNTER" ]
          },
          "value" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "MyProfileResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "email" : {
            "type" : "string"
          },
          "first_name" : {
            "type" : "string"
          },
          "last_name" : {
            "type" : "string"
          },
          "profile_picture_url" : {
            "type" : "string"
          },
          "partner_user_id" : {
            "type" : "string"
          },
          "cookie_consent" : {
            "type" : "string"
          },
          "cookie_consent_type" : {
            "type" : "string",
            "enum" : [ "EXTOLE", "CLIENT", "UNSET" ]
          },
          "processing_consent" : {
            "type" : "string"
          },
          "processing_consent_type" : {
            "type" : "string",
            "enum" : [ "EXTOLE", "CLIENT", "UNSET" ]
          },
          "parameters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "locale" : {
            "type" : "string"
          }
        }
      },
      "PollingRewardResponse" : {
        "type" : "object",
        "properties" : {
          "reward" : {
            "$ref" : "#/components/schemas/RewardResponse"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "PENDING", "SUCCEEDED", "FAILED" ]
          },
          "quality_results" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/QualityResults"
            }
          }
        }
      },
      "QualityResults" : {
        "type" : "object",
        "properties" : {
          "score" : {
            "type" : "string",
            "enum" : [ "ERROR", "LOW", "HIGH" ]
          },
          "quality_rule_results" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/QualityRuleResult"
            }
          }
        }
      },
      "QualityRuleResult" : {
        "type" : "object",
        "properties" : {
          "rule_name" : {
            "type" : "string"
          },
          "score" : {
            "type" : "string",
            "enum" : [ "ERROR", "LOW", "HIGH" ]
          }
        }
      },
      "RewardResponse" : {
        "type" : "object",
        "properties" : {
          "reward_id" : {
            "type" : "string"
          },
          "state" : {
            "type" : "string"
          },
          "partner_reward_id" : {
            "type" : "string"
          },
          "code" : {
            "type" : "string"
          },
          "face_value" : {
            "type" : "string"
          },
          "amount" : {
            "type" : "string"
          },
          "face_value_type" : {
            "type" : "string",
            "enum" : [ "PERCENT_OFF", "USD", "GBP", "EUR", "JPY", "CNY", "CAD", "AUD", "BRL", "INR", "NZD", "POINTS" ]
          },
          "date_earned" : {
            "type" : "string"
          },
          "date_issued" : {
            "type" : "string"
          },
          "date_delivered" : {
            "type" : "string"
          },
          "campaign_id" : {
            "type" : "string"
          },
          "program_label" : {
            "type" : "string"
          },
          "sandbox" : {
            "type" : "string"
          },
          "slots" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "type" : {
            "type" : "string",
            "enum" : [ "TANGO_V2", "COUPON", "CUSTOM_REWARD", "PAYPAL_PAYOUTS" ]
          },
          "reward_supplier_id" : {
            "type" : "string"
          },
          "partner_reward_supplier_id" : {
            "type" : "string"
          },
          "reward_name" : {
            "type" : "string"
          },
          "expiry_date" : {
            "type" : "string"
          },
          "id" : {
            "type" : "string"
          }
        }
      },
      "PersonAssetResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "filename" : {
            "type" : "string"
          },
          "mime_type" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "PENDING_REVIEW", "APPROVED", "DENIED" ]
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "data_type" : {
            "type" : "string",
            "enum" : [ "PUBLIC", "PRIVATE" ]
          }
        }
      },
      "SubmitEventResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "token" : {
            "type" : "string"
          },
          "cookie_consent" : {
            "type" : "string"
          }
        }
      },
      "SubmitEventRequest" : {
        "type" : "object",
        "properties" : {
          "event_name" : {
            "type" : "string"
          },
          "jwt" : {
            "type" : "string"
          },
          "id_token" : {
            "type" : "string"
          },
          "data" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          }
        }
      },
      "RenderZoneRequest" : {
        "type" : "object",
        "properties" : {
          "event_name" : {
            "type" : "string"
          },
          "jwt" : {
            "type" : "string"
          },
          "id_token" : {
            "type" : "string"
          },
          "data" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          }
        }
      },
      "ZoneResponse" : {
        "type" : "object",
        "properties" : {
          "event_id" : {
            "type" : "string"
          },
          "data" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          }
        }
      },
      "RestExceptionResponse" : {
        "type" : "object",
        "properties" : {
          "unique_id" : {
            "type" : "string",
            "description" : "Unique id associated with this error, useful for discussions with Extole"
          },
          "http_status_code" : {
            "type" : "integer",
            "description" : "HTTP status code that was returned with this error, useful if client get response code",
            "format" : "int32"
          },
          "code" : {
            "type" : "string",
            "description" : "Specific error code for this error type, documented per endpoint"
          },
          "message" : {
            "type" : "string",
            "description" : "User readable English description of the error"
          },
          "parameters" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "description" : "Attributes related to the error, varies be error code, documented per endpoint"
            },
            "description" : "Attributes related to the error, varies be error code, documented per endpoint"
          }
        },
        "description" : "Represents the API error response"
      },
      "Id" : {
        "type" : "string"
      }
    },
    "securitySchemes" : {
      "HEADER" : {
        "type" : "apiKey",
        "name" : "Authorization",
        "in" : "header"
      },
      "QUERY" : {
        "type" : "apiKey",
        "name" : "access_token",
        "in" : "query"
      },
      "COOKIE" : {
        "type" : "apiKey",
        "name" : "access_token",
        "in" : "cookie"
      }
    }
  }
}